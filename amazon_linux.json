{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description": "Neo4j on AWS - creates an EC2 Amazon Linux machine, EBS volume, static IP address, and deploys the Neo4j Graph Database on it.  **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template. **NOTE** This template needs Neo4j 2.0.1 to run.",

  "Parameters" : {

    "SSHKeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },

    "InstanceType" : {
      "Description" : "Server EC2 instance type",
      "Type" : "String",
      "Default" : "m3.medium",
      "AllowedValues" : [ "m1.medium", "m1.large", "m1.xlarge", "t2.micro", "t2.small", "t2.medium", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c1.medium", "c1.xlarge", "cc1.4xlarge","cc2.8xlarge","cg1.4xlarge" ],
      "ConstraintDescription" : "Must be a valid EC2 instance type."
    },
    "NetworkWhiteList" : {
      "Description" : " The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },

 "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "PV64"   },
      "t2.micro"    : { "Arch" : "HVM64"  },
      "t2.small"    : { "Arch" : "HVM64"  },
      "t2.medium"   : { "Arch" : "HVM64"  },
      "m1.small"    : { "Arch" : "PV64"   },
      "m1.medium"   : { "Arch" : "PV64"   },
      "m1.large"    : { "Arch" : "PV64"   },
      "m1.xlarge"   : { "Arch" : "PV64"   },
      "m2.xlarge"   : { "Arch" : "PV64"   },
      "m2.2xlarge"  : { "Arch" : "PV64"   },
      "m2.4xlarge"  : { "Arch" : "PV64"   },
      "m3.medium"   : { "Arch" : "HVM64"  },
      "m3.large"    : { "Arch" : "HVM64"  },
      "m3.xlarge"   : { "Arch" : "HVM64"  },
      "m3.2xlarge"  : { "Arch" : "HVM64"  },
      "c1.medium"   : { "Arch" : "PV64"   },
      "c1.xlarge"   : { "Arch" : "PV64"   },
      "c3.large"    : { "Arch" : "HVM64"  },
      "c3.xlarge"   : { "Arch" : "HVM64"  },
      "c3.2xlarge"  : { "Arch" : "HVM64"  },
      "c3.4xlarge"  : { "Arch" : "HVM64"  },
      "c3.8xlarge"  : { "Arch" : "HVM64"  },
      "r3.large"    : { "Arch" : "HVM64"  },
      "r3.xlarge"   : { "Arch" : "HVM64"  },
      "r3.2xlarge"  : { "Arch" : "HVM64"  },
      "r3.4xlarge"  : { "Arch" : "HVM64"  },
      "r3.8xlarge"  : { "Arch" : "HVM64"  },
      "i2.xlarge"   : { "Arch" : "HVM64"  },
      "i2.2xlarge"  : { "Arch" : "HVM64"  },
      "i2.4xlarge"  : { "Arch" : "HVM64"  },
      "i2.8xlarge"  : { "Arch" : "HVM64"  },
      "hs1.8xlarge" : { "Arch" : "HVM64"  },
      "cc2.8xlarge" : { "Arch" : "HVM64"  }
    }
,

    "AWSRegionArch2AMI" : {
      "us-east-1"      : { "32" : "ami-31814f58", "64" : "ami-1b814f72", "HVM64" : "ami-0da96764" },
      "us-west-2"      : { "32" : "ami-38fe7308", "64" : "ami-30fe7300", "HVM64" : "NOT_YET_SUPPORTED" },
      "us-west-1"      : { "32" : "ami-11d68a54", "64" : "ami-1bd68a5e", "HVM64" : "NOT_YET_SUPPORTED" },
      "eu-west-1"      : { "32" : "ami-973b06e3", "64" : "ami-953b06e1", "HVM64" : "ami-6a900219" },
      "ap-southeast-1" : { "32" : "ami-b4b0cae6", "64" : "ami-beb0caec", "HVM64" : "NOT_YET_SUPPORTED" },
      "ap-southeast-2" : { "32" : "ami-b3990e89", "64" : "ami-bd990e87", "HVM64" : "NOT_YET_SUPPORTED" },
      "ap-northeast-1" : { "32" : "ami-0644f007", "64" : "ami-0a44f00b", "HVM64" : "NOT_YET_SUPPORTED" },
     "sa-east-1"      : { "32" : "ami-3e3be423", "64" : "ami-3c3be421", "HVM64" : "NOT_YET_SUPPORTED" },
     "us-gov-west-1"  : {"PV64" : "ami-47b2d364", "HVM64" : "ami-41b2d362", "HVMG2" : "NOT_SUPPORTED"}
    }
  },

  "Resources" : {

    "Server": {
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets": {
            "default": ["yumRepoConfig", "configDisk", "neoInstall"]
          },
          "configDisk": {
            "commands": {
              "01formatFS": {
                "command": "/sbin/mkfs.ext4 /dev/xvdj || true"
              },
              "02mkdir": {
                "command": "mkdir -p /var/lib/neo4j"
              },
              "03mountFS": {
                "command": "/bin/mount /dev/xvdj /var/lib/neo4j"
              },
              "04mountOnReboot": {
                "command": "echo '/dev/xvdj /var/lib/neo4j auto defaults 0 0' >> /etc/fstab"
              }
            }
          },
          "yumRepoConfig": {
            "files": {
              "/etc/cron.daily/neo4j_backup": {
                "mode"    : "000755",
                "owner"   : "root",
                "group"   : "root",
                "content" : { "Fn::Join" : ["", [
                  "#!/bin/bash",
                  "set -e",
                  "backup_dir='/var/tmp/neo4j_backup'",
                  "backup_archive='/mnt'",
                  "neo4j-backup --from single://localhost -to $backup_dir",
                  "tar -czf ${backup_archive}//neo4j_backup.$(date +%FT%T).tgz ${backup_dir}",
                  "rm -rf ${backup_dir}" ]]}
              },
              "/etc/yum.repos.d/neo4j.repo" : {
                "mode"    : "000644",
                "owner"   : "root",
                "group"   : "root",
                "content" : { "Fn::Join" : ["", [
                  "[neo4j]\n",
                  "name=Neo4j Yum Repo\n",
                  "baseurl=http://yum.neo4j.org\n",
                  "enabled=1\n",
                  "gpgcheck=1\n" ]]}
              },
              "/tmp/neotechnology.gpg.key": {
                "source"  : "http://debian.neo4j.org/neotechnology.gpg.key",
                "mode"    : "000644",
                "owner"   : "root",
                "group"   : "root"
                }
            },
       
            "commands": {
              "01 import key": {
                "command": "rpm --import /tmp/neotechnology.gpg.key"
              }
            }
          },
          "neoInstall": {
            "packages" : {
              "yum" : {
                "neo4j-enterprise"    : ["2.2.3"],
                "haproxy"             : []
              }
            },
            "files": {
                "/etc/haproxy/haproxy.cfg": {
                   "content": {
                       "Fn::Join": ["", [
                           "global\n",
                           "    daemon\n",
                           "    maxconn 256\n",
                           "\n",
                           "defaults\n",
                           "    mode http\n",
                           "    timeout connect 5000ms\n",
                           "    timeout client 50000ms\n",
                           "    timeout server 50000ms\n",
                           "",
                           "frontend http-in\n",
                           "    bind *:80\n",
                           "    default_backend neo4j\n",
                           "",
                           "\n",
                           "backend neo4j\n",
                           "    server s1 127.0.0.1:7474 maxconn 32\n",
                           "\n",
                           "listen admin\n",
                           "    bind *:8080\n",
                           "    stats enable\n"]]
                   },
                   "mode": "000644",
                   "owner": "root",
                   "group": "root"
              }
            },
            "commands": {
              "01 tweak config key": {
                "command": "sed -i 's/^#\\(org.neo4j.server.webserver.address\\)/\\1/' /etc/neo4j/neo4j-server.properties"
              },
              "02 set UDC source service": {
                "command": "echo 'wrapper.java.additional=-Dneo4j.ext.udc.source=ec2neo' >> /etc/neo4j/neo4j-wrapper.conf"
              },
              "03 restart service": {
                "command": "service neo4j restart"
              },
              "04 start haproxy": {
                "command": "service haproxy start"
              }
            },
            "services" : {
              "sysvinit" : {
                "neo4j" : {
                  "enabled"       : "true",
                  "ensureRunning" : "true"
                }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "AvailabilityZone": { "Fn::Select" : [ 0, { "Fn::GetAZs" : "" }] },
        "InstanceType"   : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ {"Ref" : "FrontendGroup"} ],
        "KeyName"        : { "Ref" : "SSHKeyName" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",
          "yum update -y aws-cfn-bootstrap\n",

          "# Install packages\n",
          "/opt/aws/bin/cfn-init -s ", { "Ref" : "AWS::StackId" }, " -r Server ",
          "    --region ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n"

        ]]}},
      "Volumes" : [
        { "VolumeId" : { "Ref" : "EBSVolume" },
                         "Device" : "/dev/sdj"
        }]
      }
    },
    "EBSVolume": {
      "Type": "AWS::EC2::Volume",
      "Properties": {
        "AvailabilityZone": { "Fn::Select" : [ 0, { "Fn::GetAZs" : "" }] },
        "Size": "100"
      }
    },


    "FrontendGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP access via port 80 plus SSH access",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : {"Ref": "NetworkWhiteList"}},
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "NetworkWhiteList"}}
        ]
      }
    }
  },

  "Outputs" : {
     "Neo4jWebadmin" : {
            "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "Server", "PublicIp" ]}, "/browser/"]] },
            "Description" : "This is the address of your Neo4j server web administration console."
          },
        "Neo4jEndPoint" : {
            "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "Server", "PublicIp" ]}, ":80/db/data/"]] },
            "Description" : "This is the address of your Neo4j server, that your application will use."
          },
        "SshAccess": {
            "Value" : {"Fn::Join" : ["", ["ssh -i ", {"Ref": "SSHKeyName"}, ".pem -l ec2-user ", { "Fn::GetAtt" : [ "Server", "PublicIp" ]}]]},
            "Description" : "This is how you gain remote access to the machine."
        }

  }
}
